// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type CursorIn struct {
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	Cursor string `json:"cursor"`
}

type CursorOut struct {
	Count  int    `json:"count"`
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	IsEnd  bool   `json:"isEnd"`
	Cursor string `json:"cursor"`
}

type MsMutation struct {
	New *NewOut `json:"new"`
}

type MsQuery struct {
	Search *SearchOut `json:"search"`
}

type NewOut struct {
	Status NewOutStatus `json:"status"`
	ID     string       `json:"id"`
}

type SearchOut struct {
	Status SearchOutStatus `json:"status"`
	ID     []string        `json:"id"`
	Cursor *CursorOut      `json:"cursor"`
}

type NewOutStatus string

const (
	NewOutStatusOk                  NewOutStatus = "OK"
	NewOutStatusForbidden           NewOutStatus = "FORBIDDEN"
	NewOutStatusBadRequest          NewOutStatus = "BAD_REQUEST"
	NewOutStatusServerInternalError NewOutStatus = "SERVER_INTERNAL_ERROR"
)

var AllNewOutStatus = []NewOutStatus{
	NewOutStatusOk,
	NewOutStatusForbidden,
	NewOutStatusBadRequest,
	NewOutStatusServerInternalError,
}

func (e NewOutStatus) IsValid() bool {
	switch e {
	case NewOutStatusOk, NewOutStatusForbidden, NewOutStatusBadRequest, NewOutStatusServerInternalError:
		return true
	}
	return false
}

func (e NewOutStatus) String() string {
	return string(e)
}

func (e *NewOutStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NewOutStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NewOutStatus", str)
	}
	return nil
}

func (e NewOutStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderIn string

const (
	OrderInAsc  OrderIn = "ASC"
	OrderInDesc OrderIn = "DESC"
)

var AllOrderIn = []OrderIn{
	OrderInAsc,
	OrderInDesc,
}

func (e OrderIn) IsValid() bool {
	switch e {
	case OrderInAsc, OrderInDesc:
		return true
	}
	return false
}

func (e OrderIn) String() string {
	return string(e)
}

func (e *OrderIn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderIn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderIn", str)
	}
	return nil
}

func (e OrderIn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchOutStatus string

const (
	SearchOutStatusOk                  SearchOutStatus = "OK"
	SearchOutStatusForbidden           SearchOutStatus = "FORBIDDEN"
	SearchOutStatusNotFound            SearchOutStatus = "NOT_FOUND"
	SearchOutStatusBadRequest          SearchOutStatus = "BAD_REQUEST"
	SearchOutStatusServerInternalError SearchOutStatus = "SERVER_INTERNAL_ERROR"
)

var AllSearchOutStatus = []SearchOutStatus{
	SearchOutStatusOk,
	SearchOutStatusForbidden,
	SearchOutStatusNotFound,
	SearchOutStatusBadRequest,
	SearchOutStatusServerInternalError,
}

func (e SearchOutStatus) IsValid() bool {
	switch e {
	case SearchOutStatusOk, SearchOutStatusForbidden, SearchOutStatusNotFound, SearchOutStatusBadRequest, SearchOutStatusServerInternalError:
		return true
	}
	return false
}

func (e SearchOutStatus) String() string {
	return string(e)
}

func (e *SearchOutStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchOutStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchOutStatus", str)
	}
	return nil
}

func (e SearchOutStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
